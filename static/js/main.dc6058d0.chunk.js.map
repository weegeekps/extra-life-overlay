{"version":3,"sources":["models/ILogoChoice.ts","logos/2020_controller_white.svg","logos/2021_wings_white.svg","logos/2021_dice_white.svg","components/Logo.tsx","utils.ts","models/Orientation.ts","components/Progress.tsx","App.tsx","store/participant/Types.ts","store/team/Types.ts","store/Reducers.ts","store/participant/Reducers.ts","store/team/Reducers.ts","store/participant/Actions.ts","services/ExtraLife.ts","store/participant/Selectors.ts","store/participant/Sagas.ts","store/team/Actions.ts","store/team/Selectors.ts","store/team/Sagas.ts","store/Sagas.ts","index.tsx"],"names":["ILogoChoice","Logo","props","choice","Controller2020","controllerLogo2020","Dice2021","diceLogo2021","Wings2021","wingsLogo2021","chooseLogo","logo","className","src","alt","getQueryStringValue","queryString","sanitized","xss","URLSearchParams","window","location","search","get","undefined","Orientation","checkQueryStringBoolean","clamp","value","min","max","connect","state","ownProps","participant","team","options","sumDonations","fundraisingGoal","safeOptions","showTeamName","showGoal","milestones","teamName","name","current","goal","classes","hasValues","springWidth","useSpring","width","div","style","toFixed","map","milestone","position","milestoneId","ParticipantActionTypes","TeamActionTypes","App","orientation","debuggingMode","logoChoice","safeQueryString","getQueryStringEnumValue","topLevelClasses","reduce","acc","val","prepareClassString","Left","combineReducers","isFetchingParticipant","fetchMilestones","action","type","PARTICIPANT_ID_SET","id","PARTICIPANT_FETCH_REQUESTED","PARTICIPANT_FETCH_SUCCESSFUL","PARTICIPANT_FETCH_FAILED","isFetchingTeam","TEAM_ID_SET","TEAM_FETCH_REQUESTED","TEAM_FETCH_SUCCESSFUL","TEAM_FETCH_FAILED","setParticipantId","requestParticipantFetch","successfulParticipantFetch","API_HOST","fetchParticipantById","participantId","fetch","then","r","json","catch","e","console","error","fetchParticipantMilestonesById","fetchTeamById","teamId","getParticipantId","getFetchMilestones","isParticipantRequestInFlight","retrieveParticipant","tickUpdateParticipantTimer","watchFetchParticipant","runParticipantSagas","call","forEach","put","actions","select","waitDelay","delay","takeEvery","fork","requestTeamFetch","successfulTeamFetch","getTeamId","isTeamRequestInFlight","retrieveTeam","tickUpdateTeamTimer","watchFetchTeam","runTeamSagas","startup","root","participantActions","warn","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","rootSagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc6058d0.chunk.js","sourcesContent":["export enum ILogoChoice {\n  Controller2020 = \"controller2020\",\n  Wings2021 = \"wings2021\",\n  Dice2021 = \"dice2021\",\n}\n","export default __webpack_public_path__ + \"static/media/2020_controller_white.9cb54e5f.svg\";","export default __webpack_public_path__ + \"static/media/2021_wings_white.38442acb.svg\";","export default __webpack_public_path__ + \"static/media/2021_dice_white.ccd5d93e.svg\";","import \"./Logo.css\";\nimport controllerLogo2020 from \"../logos/2020_controller_white.svg\";\nimport wingsLogo2021 from \"../logos/2021_wings_white.svg\";\nimport diceLogo2021 from \"../logos/2021_dice_white.svg\";\nimport { ILogoChoice } from \"../models/ILogoChoice\";\n\nexport interface ILogoProps {\n  choice?: ILogoChoice;\n}\n\nconst chooseLogo = (choice?: ILogoChoice): [string, string] => {\n  switch (choice) {\n    case ILogoChoice.Controller2020:\n      return [controllerLogo2020, \"logo-2020\"];\n    case ILogoChoice.Dice2021:\n      return [diceLogo2021, \"logo-dice-2021\"];\n    case ILogoChoice.Wings2021:\n    default:\n      return [wingsLogo2021, \"logo-wings-2021\"];\n  }\n};\n\nconst Logo: React.FC<ILogoProps> = (props) => {\n  const { choice } = props;\n\n  const [logo, className] = chooseLogo(choice);\n\n  return (\n    <div className={\"logo \" + className} data-testid=\"logo\">\n      <img src={logo} alt=\"Extra Life\" />\n    </div>\n  );\n};\n\nexport default Logo;\n","import xss from \"xss\";\nimport { ILogoChoice } from \"./models/ILogoChoice\";\n\ntype EnumTypes = ILogoChoice;\n\nexport const getQueryStringValue = (queryString: string) => {\n  const sanitized = xss(queryString);\n\n  return (\n    new URLSearchParams(window.location.search).get(sanitized) || undefined\n  );\n};\n\nexport function getQueryStringEnumValue<T extends EnumTypes>(\n  queryString: string\n): T | undefined {\n  const safeQueryString = getQueryStringValue(queryString);\n  if (safeQueryString) {\n    return safeQueryString as T;\n  }\n\n  return undefined;\n}\n\nexport const checkQueryStringBoolean = (queryString: string) => {\n  return getQueryStringValue(queryString) === \"true\";\n};\n\nexport const prepareClassString = (...classes: string[]) => {\n  return classes.reduce((acc, val) => (acc += \" \" + val));\n};\n\nexport const clamp = (value: number, min: number, max: number) => {\n  if (value > min && value < max) return value;\n  if (value < min) return min;\n  if (value > max) return max;\n};\n","export enum Orientation {\n  Left = \"left\",\n  Right = \"right\"\n}\n","import { connect } from \"react-redux\";\nimport { useSpring, animated } from \"react-spring\";\nimport \"./Progress.css\";\nimport { IAppState } from \"../models/IAppState\";\nimport { IParticipantMilestone } from \"../models/IParticipant\";\nimport { clamp } from \"../utils\";\n\nexport interface IProgressOptions {\n  showTeamName: boolean;\n  showGoal: boolean;\n}\n\nexport interface IProgressOwnProps {\n  className?: string;\n  options?: IProgressOptions;\n}\n\nexport interface IProgressProps {\n  className?: string;\n  sumDonations: number;\n  fundraisingGoal: number;\n  teamName?: string;\n  showGoal: boolean;\n  milestones: IParticipantMilestone[];\n}\n\nconst createDefaultOptions = (): IProgressOptions => ({\n  showTeamName: false,\n  showGoal: false,\n});\n\nconst calculateCompletedWidth = (current: number, goal: number) =>\n  clamp((current / goal) * 100, 0, 100);\n\nconst Progress: React.FC<IProgressProps> = (props) => {\n  const {\n    className: classes,\n    sumDonations,\n    fundraisingGoal,\n    teamName,\n    showGoal,\n    milestones,\n  } = props;\n\n  const hasValues = fundraisingGoal !== 0 && sumDonations >= 0;\n\n  const springWidth = useSpring({\n    width:\n      (hasValues ? calculateCompletedWidth(sumDonations, fundraisingGoal) : 0) +\n      \"%\",\n  });\n\n  if (!hasValues) return null;\n\n  return (\n    <div className={\"progress-region\"}>\n      {teamName && (\n        <div className={\"progress-team-name \" + classes}>\n          <p>{teamName}</p>\n        </div>\n      )}\n      <div className=\"progress-container\" data-testid=\"progress\">\n        <div className={\"progress-bar \" + classes}>\n          <animated.div\n            className=\"completed\"\n            style={springWidth}\n          ></animated.div>\n        </div>\n        <div className={\"progress-text \" + classes}>\n          <p>${sumDonations.toFixed(2)}</p>\n        </div>\n        {milestones.map((milestone) => (\n          <div\n            className={\"progress-milestone \" + classes}\n            style={{ width: milestone.position + \"%\" }}\n            key={milestone.milestoneId}\n          >\n            <div className=\"progress-milestone-indicator\"></div>\n          </div>\n        ))}\n      </div>\n      {showGoal && (\n        <div className={\"progress-goal \" + classes}>\n          <p>${fundraisingGoal.toFixed(2)}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IAppState, ownProps: IProgressOwnProps) => {\n  const {\n    participant: { value: participant },\n    team: { value: team },\n  } = state;\n  const { className, options } = ownProps;\n\n  const sumDonations = participant\n    ? participant.sumDonations\n    : team\n    ? team.sumDonations\n    : 0;\n  const fundraisingGoal = participant\n    ? participant.fundraisingGoal\n    : team\n    ? team.fundraisingGoal\n    : 0;\n\n  const safeOptions = options || createDefaultOptions();\n\n  const milestones = participant ? participant.milestones : [];\n\n  return {\n    className,\n    sumDonations,\n    fundraisingGoal,\n    teamName: safeOptions.showTeamName ? team?.name : undefined,\n    showGoal: safeOptions.showGoal,\n    milestones,\n  };\n};\n\nexport default connect(mapStateToProps)(Progress);\n","import \"./App.css\";\nimport Logo from \"./components/Logo\";\nimport Progress from \"./components/Progress\";\nimport {\n  getQueryStringValue,\n  checkQueryStringBoolean,\n  prepareClassString,\n  getQueryStringEnumValue,\n} from \"./utils\";\nimport { Orientation } from \"./models/Orientation\";\nimport { ILogoChoice } from \"./models/ILogoChoice\";\n\nconst App: React.FC = (props) => {\n  const orientation = getQueryStringValue(\"orientation\");\n  const debuggingMode = checkQueryStringBoolean(\"debugging\");\n  const showTeamName = checkQueryStringBoolean(\"showTeamName\");\n  const showGoal = checkQueryStringBoolean(\"showGoal\");\n  const logoChoice = getQueryStringEnumValue<ILogoChoice>(\"logo\");\n  const topLevelClasses = prepareClassString(\n    \"app\",\n    orientation || Orientation.Left,\n    debuggingMode ? \"debugging\" : \"\"\n  );\n\n  return (\n    <div className={topLevelClasses} data-testid=\"app\">\n      <Logo choice={logoChoice} />\n      <Progress\n        className={orientation || Orientation.Left}\n        options={{\n          showTeamName,\n          showGoal,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export enum ParticipantActionTypes {\n  PARTICIPANT_ID_SET = \"PARTICIPANT_ID_SET\",\n  PARTICIPANT_FETCH_REQUESTED = \"PARTICIPANT_FETCH_REQUESTED\",\n  PARTICIPANT_FETCH_SUCCESSFUL = \"PARTICIPANT_FETCH_SUCCESSFUL\",\n  PARTICIPANT_FETCH_FAILED = \"PARTICIPANT_FETCH_FAILED\",\n}\n","export enum TeamActionTypes {\n  TEAM_ID_SET = \"TEAM_ID_SET\",\n  TEAM_FETCH_REQUESTED = \"TEAM_FETCH_REQUESTED\",\n  TEAM_FETCH_SUCCESSFUL = \"TEAM_FETCH_SUCCESSFUL\",\n  TEAM_FETCH_FAILED = \"TEAM_FETCH_FAILED\",\n}\n","import { combineReducers } from \"redux\";\nimport { participant } from \"./participant/Reducers\";\nimport { team } from \"./team/Reducers\";\n\nexport default combineReducers({\n  participant,\n  team,\n});\n","import { ParticipantActions } from \"./Interfaces\";\nimport { IParticipantState } from \"../../models/IAppState\";\nimport { ParticipantActionTypes } from \"./Types\";\n\nexport function participant(\n  state: IParticipantState = {\n    isFetchingParticipant: false,\n    fetchMilestones: false,\n  },\n  action: ParticipantActions\n) {\n  switch (action.type) {\n    case ParticipantActionTypes.PARTICIPANT_ID_SET:\n      return {\n        ...state,\n        id: action.id,\n        fetchMilestones: action.fetchMilestones,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED:\n      return {\n        ...state,\n        isFetchingParticipant: true,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_SUCCESSFUL:\n      return {\n        ...state,\n        value: action.participant,\n        isFetchingParticipant: false,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_FAILED:\n      return {\n        ...state,\n        isFetchingParticipant: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { ITeamState } from \"../../models/IAppState\";\nimport { TeamActions } from \"./Interfaces\";\nimport { TeamActionTypes } from \"./Types\";\n\nexport function team(\n  state: ITeamState = {\n    isFetchingTeam: false,\n  },\n  action: TeamActions\n) {\n  switch (action.type) {\n    case TeamActionTypes.TEAM_ID_SET:\n      return {\n        ...state,\n        id: action.id,\n      };\n    case TeamActionTypes.TEAM_FETCH_REQUESTED:\n      return {\n        ...state,\n        isFetchingTeam: true,\n      };\n    case TeamActionTypes.TEAM_FETCH_SUCCESSFUL:\n      return {\n        ...state,\n        value: action.team,\n        isFetchingTeam: false,\n      };\n    case TeamActionTypes.TEAM_FETCH_FAILED:\n      return {\n        ...state,\n        isFetchingTeam: false,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  IRequestParticipantFetchAction,\n  ISuccessfulParticipantFetchAction,\n  IFailedParticipantFetchAction,\n  ISetParticipantIdAction,\n} from \"./Interfaces\";\nimport { ParticipantActionTypes } from \"./Types\";\nimport { ParticipantId, IParticipant } from \"../../models/IParticipant\";\n\nexport function setParticipantId(\n  id: ParticipantId,\n  fetchMilestones: boolean\n): ISetParticipantIdAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_ID_SET,\n    id,\n    fetchMilestones,\n  };\n}\n\nexport function requestParticipantFetch(\n  id: ParticipantId,\n  fetchMilestones: boolean\n): IRequestParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED,\n    id,\n    fetchMilestones,\n  };\n}\n\nexport function successfulParticipantFetch(\n  participant: IParticipant\n): ISuccessfulParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_SUCCESSFUL,\n    participant,\n  };\n}\n\nexport function failedParticipantFetch(\n  error: Error\n): IFailedParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_FAILED,\n    error,\n  };\n}\n","import {\n  IParticipant,\n  IParticipantMilestone,\n  ParticipantId,\n} from \"../models/IParticipant\";\nimport { ITeam, TeamId } from \"../models/ITeam\";\n\nconst API_HOST = \"www.extra-life.org\";\n\nexport function fetchParticipantById(\n  participantId: ParticipantId\n): Promise<IParticipant> {\n  return fetch(`https://${API_HOST}/api/participants/${participantId}`)\n    .then((r) => r.json())\n    .catch((e) =>\n      console.error(`Fetch participant by id failed. Reason: ${e}`)\n    );\n}\n\nexport function fetchParticipantMilestonesById(\n  participantId: ParticipantId\n): Promise<IParticipantMilestone[]> {\n  return fetch(\n    `https://${API_HOST}/api/participants/${participantId}/milestones`\n  )\n    .then((r) => r.json())\n    .catch((e) =>\n      console.error(`Fetch participant milestones by id failed. Reason: ${e}`)\n    );\n}\n\nexport function fetchTeamById(teamId: TeamId): Promise<ITeam> {\n  return fetch(`https://${API_HOST}/api/teams/${teamId}`)\n    .then((r) => r.json())\n    .catch((e) => console.error(`Fetch team by id failed. Reason: ${e}`));\n}\n","import { IAppState } from \"../../models/IAppState\";\n\nexport const getParticipantId = (state: IAppState) => state.participant.id;\n\nexport const getFetchMilestones = (state: IAppState) =>\n  state.participant.fetchMilestones;\n\nexport const isParticipantRequestInFlight = (state: IAppState) =>\n  state.participant.isFetchingParticipant;\n","import * as actions from \"./Actions\";\nimport { call, put, takeEvery, delay, select, fork } from \"redux-saga/effects\";\nimport {\n  fetchParticipantById,\n  fetchParticipantMilestonesById,\n} from \"../../services/ExtraLife\";\nimport { IParticipant, ParticipantId } from \"../../models/IParticipant\";\nimport { IRequestParticipantFetchAction } from \"./Interfaces\";\nimport { ParticipantActionTypes } from \"./Types\";\nimport {\n  getFetchMilestones,\n  getParticipantId,\n  isParticipantRequestInFlight,\n} from \"./Selectors\";\nimport { clamp } from \"../../utils\";\n\nconst DELAY_IN_SECONDS = 60;\n\nexport function* retrieveParticipant(action: IRequestParticipantFetchAction) {\n  try {\n    const participant: IParticipant = yield call(\n      fetchParticipantById,\n      action.id\n    );\n    if (action.fetchMilestones) {\n      participant.milestones = yield call(\n        fetchParticipantMilestonesById,\n        action.id\n      );\n\n      participant.milestones.forEach((milestone) => {\n        milestone.position = clamp(\n          (milestone.fundraisingGoal / participant.fundraisingGoal) * 100,\n          0,\n          100\n        );\n      });\n    } else {\n      participant.milestones = [];\n    }\n    yield put(actions.successfulParticipantFetch(participant));\n  } catch (err) {\n    yield put(actions.failedParticipantFetch(err as Error));\n  }\n}\n\nexport function* tickUpdateParticipantTimer() {\n  while (true) {\n    const id: ParticipantId = yield select(getParticipantId);\n    const fetchMilestones: boolean = yield select(getFetchMilestones);\n\n    const lastRequestStillInFlight: boolean = yield select(\n      isParticipantRequestInFlight\n    );\n\n    if (!lastRequestStillInFlight && id) {\n      yield put(actions.requestParticipantFetch(id, fetchMilestones));\n    }\n\n    // Wake every second if id is undefined.\n    let waitDelay = id ? DELAY_IN_SECONDS : 1;\n    yield delay(waitDelay * 1000);\n  }\n}\n\nexport function* watchFetchParticipant() {\n  yield takeEvery(\n    ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED,\n    retrieveParticipant\n  );\n}\n\nexport function* runParticipantSagas() {\n  yield fork(watchFetchParticipant);\n  yield fork(tickUpdateParticipantTimer);\n}\n","import { ITeam, TeamId } from \"../../models/ITeam\";\nimport {\n  IFailedTeamFetchAction,\n  IRequestTeamFetchAction,\n  ISetTeamIdAction,\n  ISuccessfulTeamFetchAction,\n} from \"./Interfaces\";\nimport { TeamActionTypes } from \"./Types\";\n\nexport function setTeamId(id: TeamId): ISetTeamIdAction {\n  return {\n    type: TeamActionTypes.TEAM_ID_SET,\n    id,\n  };\n}\n\nexport function requestTeamFetch(id: TeamId): IRequestTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_REQUESTED,\n    id,\n  };\n}\n\nexport function successfulTeamFetch(team: ITeam): ISuccessfulTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_SUCCESSFUL,\n    team,\n  };\n}\n\nexport function failedTeamFetch(error: Error): IFailedTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_FAILED,\n    error,\n  };\n}\n","import { IAppState } from \"../../models/IAppState\";\n\nexport const getTeamId = (state: IAppState) => state.team.id;\n\nexport const isTeamRequestInFlight = (state: IAppState) =>\n  state.team.isFetchingTeam;\n","import * as actions from \"./Actions\";\nimport { call, delay, put, select, takeEvery, fork } from \"redux-saga/effects\";\nimport { ITeam } from \"../../models/ITeam\";\nimport { fetchTeamById } from \"../../services/ExtraLife\";\nimport { IRequestTeamFetchAction } from \"./Interfaces\";\nimport { getTeamId, isTeamRequestInFlight } from \"./Selectors\";\nimport { TeamActionTypes } from \"./Types\";\nimport { ParticipantId } from \"../../models/IParticipant\";\n\n// TODO: This and store/participant/Sagas.ts has a lot of repeat code that should be refactored.\n\nconst DELAY_IN_SECONDS = 60;\n\nexport function* retrieveTeam(action: IRequestTeamFetchAction) {\n  try {\n    const team: ITeam = yield call(fetchTeamById, action.id);\n    yield put(actions.successfulTeamFetch(team));\n  } catch (err) {\n    yield put(actions.failedTeamFetch(err as Error));\n  }\n}\n\nexport function* tickUpdateTeamTimer() {\n  while (true) {\n    const id: ParticipantId = yield select(getTeamId);\n\n    const lastRequestStillInFlight: boolean = yield select(\n      isTeamRequestInFlight\n    );\n\n    if (!lastRequestStillInFlight && id) {\n      yield put(actions.requestTeamFetch(id));\n    }\n\n    let waitDelay = id ? DELAY_IN_SECONDS : 1;\n    yield delay(waitDelay * 1000);\n  }\n}\n\nexport function* watchFetchTeam() {\n  yield takeEvery(TeamActionTypes.TEAM_FETCH_REQUESTED, retrieveTeam);\n}\n\nexport function* runTeamSagas() {\n  yield fork(watchFetchTeam);\n  yield fork(tickUpdateTeamTimer);\n}\n","import { fork, put } from \"redux-saga/effects\";\nimport { runParticipantSagas } from \"./participant/Sagas\";\nimport * as participantActions from \"./participant/Actions\";\nimport * as teamActions from \"./team/Actions\";\nimport { checkQueryStringBoolean, getQueryStringValue } from \"../utils\";\nimport { runTeamSagas } from \"./team/Sagas\";\n\nexport function* startup() {\n  const participantId = getQueryStringValue(\"participant\");\n  const orientation = getQueryStringValue(\"orientation\");\n  // Implementing milestones for right orientation is going to take a massive amount of work,\n  //  so if orientation is set, we just won't fetch milestones for now.\n  const fetchMilestones = !orientation && checkQueryStringBoolean(\"milestones\");\n\n  if (participantId) {\n    yield fork(runParticipantSagas);\n    yield put(\n      participantActions.setParticipantId(+participantId, fetchMilestones)\n    );\n  } else {\n    const teamId = getQueryStringValue(\"team\");\n    if (teamId) {\n      yield fork(runTeamSagas);\n      yield put(teamActions.setTeamId(+teamId));\n    } else {\n      console.warn(\n        \"No participant or team ID is set. Set the participant ID using the 'participant' query parameter or the team ID using the 'team' query parameter.\"\n      );\n    }\n  }\n}\n\nexport default function* root() {\n  yield fork(startup);\n}\n","import App from \"./App\";\nimport createSagaMiddleware from \"redux-saga\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rootReducer from \"./store/Reducers\";\nimport rootSagas from \"./store/Sagas\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\n\nconst initialState = {};\n\nconst sagaMiddleware = createSagaMiddleware({});\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSagas);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}