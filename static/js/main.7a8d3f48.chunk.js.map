{"version":3,"sources":["controller_white.svg","models/Orientation.ts","components/Logo.tsx","components/Progress.tsx","utils.ts","App.tsx","store/participant/Types.ts","store/team/Types.ts","store/Reducers.ts","store/participant/Reducers.ts","store/team/Reducers.ts","store/participant/Actions.ts","services/ExtraLife.ts","store/participant/Selectors.ts","store/participant/Sagas.ts","store/team/Actions.ts","store/team/Selectors.ts","store/team/Sagas.ts","store/Sagas.ts","index.tsx"],"names":["module","exports","Orientation","Logo","props","className","data-testid","src","logo","alt","calculateCompletedWidth","current","goal","max","value","min","connect","state","ownProps","participant","team","sumDonations","fundraisingGoal","classes","hasValues","springWidth","useSpring","width","div","style","toFixed","getQueryStringValue","queryString","sanitized","xss","URLSearchParams","window","location","search","get","undefined","ParticipantActionTypes","TeamActionTypes","App","orientation","debuggingMode","topLevelClasses","reduce","acc","val","prepareClassString","Left","combineReducers","isFetchingParticipant","action","type","PARTICIPANT_ID_SET","id","PARTICIPANT_FETCH_REQUESTED","PARTICIPANT_FETCH_SUCCESSFUL","PARTICIPANT_FETCH_FAILED","isFetchingTeam","TEAM_ID_SET","TEAM_FETCH_REQUESTED","TEAM_FETCH_SUCCESSFUL","TEAM_FETCH_FAILED","requestParticipantFetch","successfulParticipantFetch","fetchParticipantById","participantId","fetch","then","r","json","catch","e","console","error","fetchTeamById","teamId","getParticipantId","isParticipantRequestInFlight","retrieveParticipant","tickUpdateParticipantTimer","watchFetchParticipant","runParticipantSagas","call","put","actions","select","waitDelay","delay","takeEvery","fork","setTeamId","requestTeamFetch","successfulTeamFetch","getTeamId","isTeamRequestInFlight","retrieveTeam","tickUpdateTeamTimer","watchFetchTeam","runTeamSagas","startup","root","teamActions","warn","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","rootSagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a8d3f48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/controller_white.f4f4dde4.svg\";","export enum Orientation {\n  Left = \"left\",\n  Right = \"right\"\n}\n","import React from \"react\";\nimport \"./Logo.css\";\nimport logo from \"../controller_white.svg\";\n\nconst Logo: React.FC = (props) => {\n  return (\n    <div className=\"logo\" data-testid=\"logo\">\n      <img src={logo} alt=\"Extra Life\" />\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useSpring, animated } from \"react-spring\";\nimport \"./Progress.css\";\nimport { IAppState } from \"../models/IAppState\";\n\nexport interface IProgressOwnProps {\n  className?: string;\n}\n\nexport interface IProgressProps {\n  className?: string;\n  sumDonations: number;\n  fundraisingGoal: number;\n}\n\nconst clamp = (value: number, min: number, max: number) => {\n  if (value > min && value < max) return value;\n  if (value < min) return min;\n  if (value > max) return max;\n};\n\nconst calculateCompletedWidth = (current: number, goal: number) =>\n  clamp((current / goal) * 100, 0, 100);\n\nconst Progress: React.FC<IProgressProps> = (props) => {\n  const { className: classes, sumDonations, fundraisingGoal } = props;\n\n  const hasValues = fundraisingGoal !== 0 && sumDonations >= 0;\n\n  const springWidth = useSpring({\n    width:\n      (hasValues ? calculateCompletedWidth(sumDonations, fundraisingGoal) : 0) +\n      \"%\",\n  });\n\n  if (!hasValues) return null;\n\n  return (\n    <div className=\"progress-container\" data-testid=\"progress\">\n      <div className={\"progress-bar \" + classes}>\n        <animated.div className=\"completed\" style={springWidth}></animated.div>\n      </div>\n      <div className={\"progress-text \" + classes}>\n        <p>${sumDonations.toFixed(2)}</p>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IAppState, ownProps: IProgressOwnProps) => {\n  const {\n    participant: { value: participant },\n    team: { value: team },\n  } = state;\n  const { className } = ownProps;\n\n  const sumDonations = participant\n    ? participant.sumDonations\n    : team\n    ? team.sumDonations\n    : 0;\n  const fundraisingGoal = participant\n    ? participant.fundraisingGoal\n    : team\n    ? team.fundraisingGoal\n    : 0;\n\n  return {\n    className,\n    sumDonations,\n    fundraisingGoal,\n  };\n};\n\nexport default connect(mapStateToProps)(Progress);\n","import xss from \"xss\";\n\nexport const getQueryStringValue = (queryString: string) => {\n  const sanitized = xss(queryString)\n\n  return (\n    new URLSearchParams(window.location.search).get(sanitized) || undefined\n  );\n};\n\nexport const checkQueryStringBoolean = (queryString: string) => {\n  return getQueryStringValue(queryString) === \"true\";\n};\n\nexport const prepareClassString = (...classes: string[]) => {\n  return classes.reduce((acc, val) => (acc += \" \" + val));\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Logo from \"./components/Logo\";\nimport Progress from \"./components/Progress\";\nimport { getQueryStringValue, checkQueryStringBoolean, prepareClassString } from \"./utils\";\nimport { Orientation } from \"./models/Orientation\";\n\nconst App: React.FC = (props) => {\n  const orientation = getQueryStringValue(\"orientation\");\n  const debuggingMode = checkQueryStringBoolean(\"debugging\");\n  const topLevelClasses = prepareClassString(\n    \"app\",\n    orientation || Orientation.Left,\n    debuggingMode ? \"debugging\" : \"\"\n  );\n\n  return (\n    <div className={topLevelClasses} data-testid=\"app\">\n      <Logo />\n      <Progress className={orientation || Orientation.Left} />\n    </div>\n  );\n};\n\nexport default App;\n","export enum ParticipantActionTypes {\n  PARTICIPANT_ID_SET = \"PARTICIPANT_ID_SET\",\n  PARTICIPANT_FETCH_REQUESTED = \"PARTICIPANT_FETCH_REQUESTED\",\n  PARTICIPANT_FETCH_SUCCESSFUL = \"PARTICIPANT_FETCH_SUCCESSFUL\",\n  PARTICIPANT_FETCH_FAILED = \"PARTICIPANT_FETCH_FAILED\",\n}\n","export enum TeamActionTypes {\n  TEAM_ID_SET = \"TEAM_ID_SET\",\n  TEAM_FETCH_REQUESTED = \"TEAM_FETCH_REQUESTED\",\n  TEAM_FETCH_SUCCESSFUL = \"TEAM_FETCH_SUCCESSFUL\",\n  TEAM_FETCH_FAILED = \"TEAM_FETCH_FAILED\",\n}\n","import { combineReducers } from \"redux\";\nimport { participant } from \"./participant/Reducers\";\nimport { team } from \"./team/Reducers\";\n\nexport default combineReducers({\n  participant,\n  team,\n});\n","import { ParticipantActions } from \"./Interfaces\";\nimport { IParticipantState } from \"../../models/IAppState\";\nimport { ParticipantActionTypes } from \"./Types\";\n\nexport function participant(\n  state: IParticipantState = {\n    isFetchingParticipant: false,\n  },\n  action: ParticipantActions\n) {\n  switch (action.type) {\n    case ParticipantActionTypes.PARTICIPANT_ID_SET:\n      return {\n        ...state,\n        id: action.id,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED:\n      return {\n        ...state,\n        isFetchingParticipant: true,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_SUCCESSFUL:\n      return {\n        ...state,\n        value: action.participant,\n        isFetchingParticipant: false,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_FAILED:\n      return {\n        ...state,\n        isFetchingParticipant: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { ITeamState } from \"../../models/IAppState\";\nimport { TeamActions } from \"./Interfaces\";\nimport { TeamActionTypes } from \"./Types\";\n\nexport function team(\n  state: ITeamState = {\n    isFetchingTeam: false,\n  },\n  action: TeamActions\n) {\n  switch (action.type) {\n    case TeamActionTypes.TEAM_ID_SET:\n      return {\n        ...state,\n        id: action.id,\n      };\n    case TeamActionTypes.TEAM_FETCH_REQUESTED:\n      return {\n        ...state,\n        isFetchingTeam: true,\n      };\n    case TeamActionTypes.TEAM_FETCH_SUCCESSFUL:\n      return {\n        ...state,\n        value: action.team,\n        isFetchingTeam: false,\n      };\n    case TeamActionTypes.TEAM_FETCH_FAILED:\n      return {\n        ...state,\n        isFetchingTeam: false,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  IRequestParticipantFetchAction,\n  ISuccessfulParticipantFetchAction,\n  IFailedParticipantFetchAction,\n  ISetParticipantIdAction,\n} from \"./Interfaces\";\nimport { ParticipantActionTypes } from \"./Types\";\nimport { ParticipantId, IParticipant } from \"../../models/IParticipant\";\n\nexport function setParticipantId(id: ParticipantId): ISetParticipantIdAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_ID_SET,\n    id,\n  };\n}\n\nexport function requestParticipantFetch(\n  id: ParticipantId\n): IRequestParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED,\n    id,\n  };\n}\n\nexport function successfulParticipantFetch(\n  participant: IParticipant\n): ISuccessfulParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_SUCCESSFUL,\n    participant,\n  };\n}\n\nexport function failedParticipantFetch(\n  error: Error\n): IFailedParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_FAILED,\n    error,\n  };\n}\n","import { IParticipant, ParticipantId } from \"../models/IParticipant\";\nimport { ITeam, TeamId } from \"../models/ITeam\";\n\nconst API_HOST = 'www.extra-life.org'\n\nexport function fetchParticipantById(\n  participantId: ParticipantId\n): Promise<IParticipant> {\n  return fetch(`https://${API_HOST}/api/participants/${participantId}`)\n    .then((r) => r.json())\n    .catch((e) =>\n      console.error(`Fetch participant by id failed. Reason: ${e}`)\n    );\n}\n\nexport function fetchTeamById(\n  teamId: TeamId\n): Promise<ITeam> {\n  return fetch(`https://${API_HOST}/api/teams/${teamId}`)\n    .then((r) => r.json())\n    .catch((e) =>\n      console.error(`Fetch team by id failed. Reason: ${e}`)\n    );\n}\n","import { IAppState } from \"../../models/IAppState\";\n\nexport const getParticipantId = (state: IAppState) => state.participant.id;\n\nexport const isParticipantRequestInFlight = (state: IAppState) =>\n  state.participant.isFetchingParticipant;\n","import * as actions from \"./Actions\";\nimport { call, put, takeEvery, delay, select, fork } from \"redux-saga/effects\";\nimport { fetchParticipantById } from \"../../services/ExtraLife\";\nimport { IParticipant } from \"../../models/IParticipant\";\nimport { IRequestParticipantFetchAction } from \"./Interfaces\";\nimport { ParticipantActionTypes } from \"./Types\";\nimport { getParticipantId, isParticipantRequestInFlight } from \"./Selectors\";\n\nconst DELAY_IN_SECONDS = 60;\n\nexport function* retrieveParticipant(action: IRequestParticipantFetchAction) {\n  try {\n    const participant: IParticipant = yield call(\n      fetchParticipantById,\n      action.id\n    );\n    yield put(actions.successfulParticipantFetch(participant));\n  } catch (err) {\n    yield put(actions.failedParticipantFetch(err));\n  }\n}\n\nexport function* tickUpdateParticipantTimer() {\n  while (true) {\n    const id = yield select(getParticipantId);\n\n    const lastRequestStillInFlight = yield select(isParticipantRequestInFlight);\n\n    if (!lastRequestStillInFlight && id) {\n      yield put(actions.requestParticipantFetch(id));\n    }\n\n    // Wake every second if id is undefined.\n    let waitDelay = id ? DELAY_IN_SECONDS : 1;\n    yield delay(waitDelay * 1000);\n  }\n}\n\nexport function* watchFetchParticipant() {\n  yield takeEvery(\n    ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED,\n    retrieveParticipant\n  );\n}\n\nexport function* runParticipantSagas() {\n  yield fork(watchFetchParticipant);\n  yield fork(tickUpdateParticipantTimer);\n}\n","import { ITeam, TeamId } from \"../../models/ITeam\";\nimport {\n  IFailedTeamFetchAction,\n  IRequestTeamFetchAction,\n  ISetTeamIdAction,\n  ISuccessfulTeamFetchAction,\n} from \"./Interfaces\";\nimport { TeamActionTypes } from \"./Types\";\n\nexport function setTeamId(id: TeamId): ISetTeamIdAction {\n  return {\n    type: TeamActionTypes.TEAM_ID_SET,\n    id,\n  };\n}\n\nexport function requestTeamFetch(id: TeamId): IRequestTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_REQUESTED,\n    id,\n  };\n}\n\nexport function successfulTeamFetch(team: ITeam): ISuccessfulTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_SUCCESSFUL,\n    team,\n  };\n}\n\nexport function failedTeamFetch(error: Error): IFailedTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_FAILED,\n    error,\n  };\n}\n","import { IAppState } from \"../../models/IAppState\";\n\nexport const getTeamId = (state: IAppState) => state.team.id;\n\nexport const isTeamRequestInFlight = (state: IAppState) =>\n  state.team.isFetchingTeam;\n","import * as actions from \"./Actions\";\nimport { call, delay, put, select, takeEvery, fork } from \"redux-saga/effects\";\nimport { ITeam } from \"../../models/ITeam\";\nimport { fetchTeamById } from \"../../services/ExtraLife\";\nimport { IRequestTeamFetchAction } from \"./Interfaces\";\nimport { getTeamId, isTeamRequestInFlight } from \"./Selectors\";\nimport { TeamActionTypes } from \"./Types\";\n\n// TODO: This and store/participant/Sagas.ts has a lot of repeat code that should be refactored.\n\nconst DELAY_IN_SECONDS = 60;\n\nexport function* retrieveTeam(action: IRequestTeamFetchAction) {\n  try {\n    const team: ITeam = yield call(fetchTeamById, action.id);\n    yield put(actions.successfulTeamFetch(team));\n  } catch (err) {\n    yield put(actions.failedTeamFetch(err));\n  }\n}\n\nexport function* tickUpdateTeamTimer() {\n  while (true) {\n    const id = yield select(getTeamId);\n\n    const lastRequestStillInFlight = yield select(isTeamRequestInFlight);\n\n    if (!lastRequestStillInFlight && id) {\n      yield put(actions.requestTeamFetch(id));\n    }\n\n    let waitDelay = id ? DELAY_IN_SECONDS : 1;\n    yield delay(waitDelay * 1000);\n  }\n}\n\nexport function* watchFetchTeam() {\n  yield takeEvery(TeamActionTypes.TEAM_FETCH_REQUESTED, retrieveTeam);\n}\n\nexport function* runTeamSagas() {\n  yield fork(watchFetchTeam);\n  yield fork(tickUpdateTeamTimer);\n}\n","import { fork, put } from \"redux-saga/effects\";\nimport { runParticipantSagas } from \"./participant/Sagas\";\nimport * as participantActions from \"./participant/Actions\";\nimport * as teamActions from \"./team/Actions\";\nimport { getQueryStringValue } from \"../utils\";\nimport { runTeamSagas } from \"./team/Sagas\";\n\nexport function* startup() {\n  const participantId = getQueryStringValue(\"participant\");\n\n  if (participantId) {\n    yield fork(runParticipantSagas);\n    yield put(participantActions.setParticipantId(+participantId));\n  } else {\n    const teamId = getQueryStringValue(\"team\");\n    if (teamId) {\n      yield fork(runTeamSagas);\n      yield put(teamActions.setTeamId(+teamId));\n    } else {\n      console.warn(\n        \"No participant or team ID is set. Set the participant ID using the 'participant' query parameter or the team ID using the 'team' query parameter.\"\n      );\n    }\n  }\n}\n\nexport default function* root() {\n  yield fork(startup);\n}\n","import App from \"./App\";\nimport createSagaMiddleware from \"redux-saga\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rootReducer from \"./store/Reducers\";\nimport rootSagas from \"./store/Sagas\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\n\nconst initialState = {};\n\nconst sagaMiddleware = createSagaMiddleware({});\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSagas);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}