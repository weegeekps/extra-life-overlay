{"version":3,"sources":["models/ILogoChoice.ts","logos/2020_controller_white.svg","logos/2021_wings_white.svg","logos/2021_dice_white.svg","components/Logo.tsx","components/Progress.tsx","utils.ts","models/Orientation.ts","App.tsx","store/participant/Types.ts","store/team/Types.ts","store/Reducers.ts","store/participant/Reducers.ts","store/team/Reducers.ts","store/participant/Actions.ts","services/ExtraLife.ts","store/participant/Selectors.ts","store/participant/Sagas.ts","store/team/Actions.ts","store/team/Selectors.ts","store/team/Sagas.ts","store/Sagas.ts","index.tsx"],"names":["ILogoChoice","Logo","props","choice","Controller2020","controllerLogo2020","Dice2021","diceLogo2021","Wings2021","wingsLogo2021","chooseLogo","logo","className","src","alt","calculateCompletedWidth","current","goal","max","value","min","connect","state","ownProps","participant","team","safeOptions","options","showTeamName","showGoal","sumDonations","fundraisingGoal","teamName","name","undefined","classes","hasValues","springWidth","useSpring","width","div","style","toFixed","getQueryStringValue","queryString","sanitized","xss","URLSearchParams","window","location","search","get","Orientation","checkQueryStringBoolean","ParticipantActionTypes","TeamActionTypes","App","orientation","debuggingMode","logoChoice","safeQueryString","getQueryStringEnumValue","topLevelClasses","reduce","acc","val","prepareClassString","Left","combineReducers","isFetchingParticipant","action","type","PARTICIPANT_ID_SET","id","PARTICIPANT_FETCH_REQUESTED","PARTICIPANT_FETCH_SUCCESSFUL","PARTICIPANT_FETCH_FAILED","isFetchingTeam","TEAM_ID_SET","TEAM_FETCH_REQUESTED","TEAM_FETCH_SUCCESSFUL","TEAM_FETCH_FAILED","requestParticipantFetch","successfulParticipantFetch","API_HOST","fetchParticipantById","participantId","fetch","then","r","json","catch","e","console","error","fetchTeamById","teamId","getParticipantId","isParticipantRequestInFlight","retrieveParticipant","tickUpdateParticipantTimer","watchFetchParticipant","runParticipantSagas","call","put","actions","select","waitDelay","delay","takeEvery","fork","setTeamId","requestTeamFetch","successfulTeamFetch","getTeamId","isTeamRequestInFlight","retrieveTeam","tickUpdateTeamTimer","watchFetchTeam","runTeamSagas","startup","root","teamActions","warn","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","rootSagas","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d1e4898.chunk.js","sourcesContent":["export enum ILogoChoice {\n  Controller2020 = \"controller2020\",\n  Wings2021 = \"wings2021\",\n  Dice2021 = \"dice2021\",\n}\n","export default __webpack_public_path__ + \"static/media/2020_controller_white.9cb54e5f.svg\";","export default __webpack_public_path__ + \"static/media/2021_wings_white.38442acb.svg\";","export default __webpack_public_path__ + \"static/media/2021_dice_white.ccd5d93e.svg\";","import \"./Logo.css\";\nimport controllerLogo2020 from \"../logos/2020_controller_white.svg\";\nimport wingsLogo2021 from \"../logos/2021_wings_white.svg\";\nimport diceLogo2021 from \"../logos/2021_dice_white.svg\";\nimport { ILogoChoice } from \"../models/ILogoChoice\";\n\nexport interface ILogoProps {\n  choice?: ILogoChoice;\n}\n\nconst chooseLogo = (choice?: ILogoChoice): [string, string] => {\n  switch (choice) {\n    case ILogoChoice.Controller2020:\n      return [controllerLogo2020, \"logo-2020\"];\n    case ILogoChoice.Dice2021:\n      return [diceLogo2021, \"logo-dice-2021\"];\n    case ILogoChoice.Wings2021:\n    default:\n      return [wingsLogo2021, \"logo-wings-2021\"];\n  }\n};\n\nconst Logo: React.FC<ILogoProps> = (props) => {\n  const { choice } = props;\n\n  const [logo, className] = chooseLogo(choice);\n\n  return (\n    <div className={\"logo \" + className} data-testid=\"logo\">\n      <img src={logo} alt=\"Extra Life\" />\n    </div>\n  );\n};\n\nexport default Logo;\n","import { connect } from \"react-redux\";\nimport { useSpring, animated } from \"react-spring\";\nimport \"./Progress.css\";\nimport { IAppState } from \"../models/IAppState\";\n\nexport interface IProgressOptions {\n  showTeamName: boolean;\n  showGoal: boolean;\n}\n\nexport interface IProgressOwnProps {\n  className?: string;\n  options?: IProgressOptions;\n}\n\nexport interface IProgressProps {\n  className?: string;\n  sumDonations: number;\n  fundraisingGoal: number;\n  teamName?: string;\n  showGoal: boolean;\n}\n\nconst createDefaultOptions = (): IProgressOptions => ({\n  showTeamName: false,\n  showGoal: false,\n});\n\nconst clamp = (value: number, min: number, max: number) => {\n  if (value > min && value < max) return value;\n  if (value < min) return min;\n  if (value > max) return max;\n};\n\nconst calculateCompletedWidth = (current: number, goal: number) =>\n  clamp((current / goal) * 100, 0, 100);\n\nconst Progress: React.FC<IProgressProps> = (props) => {\n  const {\n    className: classes,\n    sumDonations,\n    fundraisingGoal,\n    teamName,\n    showGoal,\n  } = props;\n\n  const hasValues = fundraisingGoal !== 0 && sumDonations >= 0;\n\n  const springWidth = useSpring({\n    width:\n      (hasValues ? calculateCompletedWidth(sumDonations, fundraisingGoal) : 0) +\n      \"%\",\n  });\n\n  if (!hasValues) return null;\n\n  return (\n    <div className={\"progress-region\"}>\n      {teamName && (\n        <div className={\"progress-team-name \" + classes}>\n          <p>{teamName}</p>\n        </div>\n      )}\n      <div className=\"progress-container\" data-testid=\"progress\">\n        <div className={\"progress-bar \" + classes}>\n          <animated.div\n            className=\"completed\"\n            style={springWidth}\n          ></animated.div>\n        </div>\n        <div className={\"progress-text \" + classes}>\n          <p>${sumDonations.toFixed(2)}</p>\n        </div>\n      </div>\n      {showGoal && (\n        <div className={\"progress-goal \" + classes}>\n          <p>${fundraisingGoal.toFixed(2)}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IAppState, ownProps: IProgressOwnProps) => {\n  const {\n    participant: { value: participant },\n    team: { value: team },\n  } = state;\n  const { className, options } = ownProps;\n\n  const sumDonations = participant\n    ? participant.sumDonations\n    : team\n    ? team.sumDonations\n    : 0;\n  const fundraisingGoal = participant\n    ? participant.fundraisingGoal\n    : team\n    ? team.fundraisingGoal\n    : 0;\n\n  const safeOptions = options || createDefaultOptions();\n\n  return {\n    className,\n    sumDonations,\n    fundraisingGoal,\n    teamName: safeOptions.showTeamName ? team?.name : undefined,\n    showGoal: safeOptions.showGoal,\n  };\n};\n\nexport default connect(mapStateToProps)(Progress);\n","import xss from \"xss\";\nimport { ILogoChoice } from \"./models/ILogoChoice\";\n\ntype EnumTypes = ILogoChoice;\n\nexport const getQueryStringValue = (queryString: string) => {\n  const sanitized = xss(queryString);\n\n  return (\n    new URLSearchParams(window.location.search).get(sanitized) || undefined\n  );\n};\n\nexport function getQueryStringEnumValue<T extends EnumTypes>(\n  queryString: string\n): T | undefined {\n  const safeQueryString = getQueryStringValue(queryString);\n  if (safeQueryString) {\n    return safeQueryString as T;\n  }\n\n  return undefined;\n}\n\nexport const checkQueryStringBoolean = (queryString: string) => {\n  return getQueryStringValue(queryString) === \"true\";\n};\n\nexport const prepareClassString = (...classes: string[]) => {\n  return classes.reduce((acc, val) => (acc += \" \" + val));\n};\n","export enum Orientation {\n  Left = \"left\",\n  Right = \"right\"\n}\n","import \"./App.css\";\nimport Logo from \"./components/Logo\";\nimport Progress from \"./components/Progress\";\nimport {\n  getQueryStringValue,\n  checkQueryStringBoolean,\n  prepareClassString,\n  getQueryStringEnumValue,\n} from \"./utils\";\nimport { Orientation } from \"./models/Orientation\";\nimport { ILogoChoice } from \"./models/ILogoChoice\";\n\nconst App: React.FC = (props) => {\n  const orientation = getQueryStringValue(\"orientation\");\n  const debuggingMode = checkQueryStringBoolean(\"debugging\");\n  const showTeamName = checkQueryStringBoolean(\"showTeamName\");\n  const showGoal = checkQueryStringBoolean(\"showGoal\");\n  const logoChoice = getQueryStringEnumValue<ILogoChoice>(\"logo\");\n  const topLevelClasses = prepareClassString(\n    \"app\",\n    orientation || Orientation.Left,\n    debuggingMode ? \"debugging\" : \"\"\n  );\n\n  return (\n    <div className={topLevelClasses} data-testid=\"app\">\n      <Logo choice={logoChoice} />\n      <Progress\n        className={orientation || Orientation.Left}\n        options={{\n          showTeamName,\n          showGoal,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export enum ParticipantActionTypes {\n  PARTICIPANT_ID_SET = \"PARTICIPANT_ID_SET\",\n  PARTICIPANT_FETCH_REQUESTED = \"PARTICIPANT_FETCH_REQUESTED\",\n  PARTICIPANT_FETCH_SUCCESSFUL = \"PARTICIPANT_FETCH_SUCCESSFUL\",\n  PARTICIPANT_FETCH_FAILED = \"PARTICIPANT_FETCH_FAILED\",\n}\n","export enum TeamActionTypes {\n  TEAM_ID_SET = \"TEAM_ID_SET\",\n  TEAM_FETCH_REQUESTED = \"TEAM_FETCH_REQUESTED\",\n  TEAM_FETCH_SUCCESSFUL = \"TEAM_FETCH_SUCCESSFUL\",\n  TEAM_FETCH_FAILED = \"TEAM_FETCH_FAILED\",\n}\n","import { combineReducers } from \"redux\";\nimport { participant } from \"./participant/Reducers\";\nimport { team } from \"./team/Reducers\";\n\nexport default combineReducers({\n  participant,\n  team,\n});\n","import { ParticipantActions } from \"./Interfaces\";\nimport { IParticipantState } from \"../../models/IAppState\";\nimport { ParticipantActionTypes } from \"./Types\";\n\nexport function participant(\n  state: IParticipantState = {\n    isFetchingParticipant: false,\n  },\n  action: ParticipantActions\n) {\n  switch (action.type) {\n    case ParticipantActionTypes.PARTICIPANT_ID_SET:\n      return {\n        ...state,\n        id: action.id,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED:\n      return {\n        ...state,\n        isFetchingParticipant: true,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_SUCCESSFUL:\n      return {\n        ...state,\n        value: action.participant,\n        isFetchingParticipant: false,\n      };\n    case ParticipantActionTypes.PARTICIPANT_FETCH_FAILED:\n      return {\n        ...state,\n        isFetchingParticipant: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { ITeamState } from \"../../models/IAppState\";\nimport { TeamActions } from \"./Interfaces\";\nimport { TeamActionTypes } from \"./Types\";\n\nexport function team(\n  state: ITeamState = {\n    isFetchingTeam: false,\n  },\n  action: TeamActions\n) {\n  switch (action.type) {\n    case TeamActionTypes.TEAM_ID_SET:\n      return {\n        ...state,\n        id: action.id,\n      };\n    case TeamActionTypes.TEAM_FETCH_REQUESTED:\n      return {\n        ...state,\n        isFetchingTeam: true,\n      };\n    case TeamActionTypes.TEAM_FETCH_SUCCESSFUL:\n      return {\n        ...state,\n        value: action.team,\n        isFetchingTeam: false,\n      };\n    case TeamActionTypes.TEAM_FETCH_FAILED:\n      return {\n        ...state,\n        isFetchingTeam: false,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  IRequestParticipantFetchAction,\n  ISuccessfulParticipantFetchAction,\n  IFailedParticipantFetchAction,\n  ISetParticipantIdAction,\n} from \"./Interfaces\";\nimport { ParticipantActionTypes } from \"./Types\";\nimport { ParticipantId, IParticipant } from \"../../models/IParticipant\";\n\nexport function setParticipantId(id: ParticipantId): ISetParticipantIdAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_ID_SET,\n    id,\n  };\n}\n\nexport function requestParticipantFetch(\n  id: ParticipantId\n): IRequestParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED,\n    id,\n  };\n}\n\nexport function successfulParticipantFetch(\n  participant: IParticipant\n): ISuccessfulParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_SUCCESSFUL,\n    participant,\n  };\n}\n\nexport function failedParticipantFetch(\n  error: Error\n): IFailedParticipantFetchAction {\n  return {\n    type: ParticipantActionTypes.PARTICIPANT_FETCH_FAILED,\n    error,\n  };\n}\n","import { IParticipant, ParticipantId } from \"../models/IParticipant\";\nimport { ITeam, TeamId } from \"../models/ITeam\";\n\nconst API_HOST = 'www.extra-life.org'\n\nexport function fetchParticipantById(\n  participantId: ParticipantId\n): Promise<IParticipant> {\n  return fetch(`https://${API_HOST}/api/participants/${participantId}`)\n    .then((r) => r.json())\n    .catch((e) =>\n      console.error(`Fetch participant by id failed. Reason: ${e}`)\n    );\n}\n\nexport function fetchTeamById(\n  teamId: TeamId\n): Promise<ITeam> {\n  return fetch(`https://${API_HOST}/api/teams/${teamId}`)\n    .then((r) => r.json())\n    .catch((e) =>\n      console.error(`Fetch team by id failed. Reason: ${e}`)\n    );\n}\n","import { IAppState } from \"../../models/IAppState\";\n\nexport const getParticipantId = (state: IAppState) => state.participant.id;\n\nexport const isParticipantRequestInFlight = (state: IAppState) =>\n  state.participant.isFetchingParticipant;\n","import * as actions from \"./Actions\";\nimport { call, put, takeEvery, delay, select, fork } from \"redux-saga/effects\";\nimport { fetchParticipantById } from \"../../services/ExtraLife\";\nimport { IParticipant, ParticipantId } from \"../../models/IParticipant\";\nimport { IRequestParticipantFetchAction } from \"./Interfaces\";\nimport { ParticipantActionTypes } from \"./Types\";\nimport { getParticipantId, isParticipantRequestInFlight } from \"./Selectors\";\n\nconst DELAY_IN_SECONDS = 60;\n\nexport function* retrieveParticipant(action: IRequestParticipantFetchAction) {\n  try {\n    const participant: IParticipant = yield call(\n      fetchParticipantById,\n      action.id\n    );\n    yield put(actions.successfulParticipantFetch(participant));\n  } catch (err) {\n    yield put(actions.failedParticipantFetch(err as Error));\n  }\n}\n\nexport function* tickUpdateParticipantTimer() {\n  while (true) {\n    const id: ParticipantId = yield select(getParticipantId);\n\n    const lastRequestStillInFlight: boolean = yield select(\n      isParticipantRequestInFlight\n    );\n\n    if (!lastRequestStillInFlight && id) {\n      yield put(actions.requestParticipantFetch(id));\n    }\n\n    // Wake every second if id is undefined.\n    let waitDelay = id ? DELAY_IN_SECONDS : 1;\n    yield delay(waitDelay * 1000);\n  }\n}\n\nexport function* watchFetchParticipant() {\n  yield takeEvery(\n    ParticipantActionTypes.PARTICIPANT_FETCH_REQUESTED,\n    retrieveParticipant\n  );\n}\n\nexport function* runParticipantSagas() {\n  yield fork(watchFetchParticipant);\n  yield fork(tickUpdateParticipantTimer);\n}\n","import { ITeam, TeamId } from \"../../models/ITeam\";\nimport {\n  IFailedTeamFetchAction,\n  IRequestTeamFetchAction,\n  ISetTeamIdAction,\n  ISuccessfulTeamFetchAction,\n} from \"./Interfaces\";\nimport { TeamActionTypes } from \"./Types\";\n\nexport function setTeamId(id: TeamId): ISetTeamIdAction {\n  return {\n    type: TeamActionTypes.TEAM_ID_SET,\n    id,\n  };\n}\n\nexport function requestTeamFetch(id: TeamId): IRequestTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_REQUESTED,\n    id,\n  };\n}\n\nexport function successfulTeamFetch(team: ITeam): ISuccessfulTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_SUCCESSFUL,\n    team,\n  };\n}\n\nexport function failedTeamFetch(error: Error): IFailedTeamFetchAction {\n  return {\n    type: TeamActionTypes.TEAM_FETCH_FAILED,\n    error,\n  };\n}\n","import { IAppState } from \"../../models/IAppState\";\n\nexport const getTeamId = (state: IAppState) => state.team.id;\n\nexport const isTeamRequestInFlight = (state: IAppState) =>\n  state.team.isFetchingTeam;\n","import * as actions from \"./Actions\";\nimport { call, delay, put, select, takeEvery, fork } from \"redux-saga/effects\";\nimport { ITeam } from \"../../models/ITeam\";\nimport { fetchTeamById } from \"../../services/ExtraLife\";\nimport { IRequestTeamFetchAction } from \"./Interfaces\";\nimport { getTeamId, isTeamRequestInFlight } from \"./Selectors\";\nimport { TeamActionTypes } from \"./Types\";\nimport { ParticipantId } from \"../../models/IParticipant\";\n\n// TODO: This and store/participant/Sagas.ts has a lot of repeat code that should be refactored.\n\nconst DELAY_IN_SECONDS = 60;\n\nexport function* retrieveTeam(action: IRequestTeamFetchAction) {\n  try {\n    const team: ITeam = yield call(fetchTeamById, action.id);\n    yield put(actions.successfulTeamFetch(team));\n  } catch (err) {\n    yield put(actions.failedTeamFetch(err as Error));\n  }\n}\n\nexport function* tickUpdateTeamTimer() {\n  while (true) {\n    const id: ParticipantId = yield select(getTeamId);\n\n    const lastRequestStillInFlight: boolean = yield select(\n      isTeamRequestInFlight\n    );\n\n    if (!lastRequestStillInFlight && id) {\n      yield put(actions.requestTeamFetch(id));\n    }\n\n    let waitDelay = id ? DELAY_IN_SECONDS : 1;\n    yield delay(waitDelay * 1000);\n  }\n}\n\nexport function* watchFetchTeam() {\n  yield takeEvery(TeamActionTypes.TEAM_FETCH_REQUESTED, retrieveTeam);\n}\n\nexport function* runTeamSagas() {\n  yield fork(watchFetchTeam);\n  yield fork(tickUpdateTeamTimer);\n}\n","import { fork, put } from \"redux-saga/effects\";\nimport { runParticipantSagas } from \"./participant/Sagas\";\nimport * as participantActions from \"./participant/Actions\";\nimport * as teamActions from \"./team/Actions\";\nimport { getQueryStringValue } from \"../utils\";\nimport { runTeamSagas } from \"./team/Sagas\";\n\nexport function* startup() {\n  const participantId = getQueryStringValue(\"participant\");\n\n  if (participantId) {\n    yield fork(runParticipantSagas);\n    yield put(participantActions.setParticipantId(+participantId));\n  } else {\n    const teamId = getQueryStringValue(\"team\");\n    if (teamId) {\n      yield fork(runTeamSagas);\n      yield put(teamActions.setTeamId(+teamId));\n    } else {\n      console.warn(\n        \"No participant or team ID is set. Set the participant ID using the 'participant' query parameter or the team ID using the 'team' query parameter.\"\n      );\n    }\n  }\n}\n\nexport default function* root() {\n  yield fork(startup);\n}\n","import App from \"./App\";\nimport createSagaMiddleware from \"redux-saga\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rootReducer from \"./store/Reducers\";\nimport rootSagas from \"./store/Sagas\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\n\nconst initialState = {};\n\nconst sagaMiddleware = createSagaMiddleware({});\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSagas);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}